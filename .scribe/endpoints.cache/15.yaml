## Autogenerated by Scribe. DO NOT MODIFY.

name: Visit
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/admin/visit
    metadata:
      title: 'List all Visits'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters:
      card_id:
        name: card_id
        description: Card.
        required: false
        example: null
        type: string
        custom: []
      user_id:
        name: user_id
        description: User.
        required: false
        example: null
        type: string
        custom: []
      sort:
        name: sort
        description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, or <code>user_id</code>.'
        required: false
        example: card_id
        type: string
        custom: []
      order:
        name: order
        description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
        required: false
        example: desc
        type: string
        custom: []
      page:
        name: page
        description: 'Page to load.'
        required: false
        example: 10
        type: integer
        custom: []
      limit:
        name: limit
        description: 'Items per page. Must be at least 10. Must not be greater than 500.'
        required: false
        example: 120
        type: integer
        custom: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "items": [
              {
                "id": 6,
                "card_id": 1,
                "user_id": 1,
                "card": {
                  "id": 49394739894111,
                  "last_name": "Kitsune",
                  "first_name": "Yasu",
                  "street": "Teststraße 123",
                  "postcode": "12345",
                  "city": "Teststadt",
                  "valid_from": "2022-01-01T00:00:00.000000Z",
                  "valid_until": "2022-03-31T00:00:00.000000Z",
                  "creator_id": 1,
                  "comment": null,
                  "created_at": "2022-08-18T13:47:42.000000Z",
                  "updated_at": "2022-08-18T13:47:42.000000Z"
                },
                "created_at": "2022-08-16T16:32:52.000000Z",
                "updated_at": "2022-08-16T16:32:52.000000Z"
              }, {
                "id": 7,
                "card_id": 49394739894111,
                "user_id": 1,
                "card": {
                  "id": 49394739894111,
                  "last_name": "Kitsune",
                  "first_name": "Yasu",
                  "street": "Teststraße 123",
                  "postcode": "12345",
                  "city": "Teststadt",
                  "valid_from": "2022-01-01T00:00:00.000000Z",
                  "valid_until": "2022-03-31T00:00:00.000000Z",
                  "creator_id": 1,
                  "comment": null,
                  "created_at": "2022-08-18T13:47:42.000000Z",
                  "updated_at": "2022-08-18T13:47:42.000000Z"
                },
                "created_at": "2022-08-17T13:52:35.000000Z",
                "updated_at": "2022-08-17T13:52:35.000000Z"
              }, {
                "id": 8,
                "card_id": 49394739894111,
                "user_id": 3,
                "card": {
                  "id": 49394739894111,
                  "last_name": "Kitsune",
                  "first_name": "Yasu",
                  "street": "Teststraße 123",
                  "postcode": "12345",
                  "city": "Teststadt",
                  "valid_from": "2022-01-01T00:00:00.000000Z",
                  "valid_until": "2022-03-31T00:00:00.000000Z",
                  "creator_id": 1,
                  "comment": null,
                  "created_at": "2022-08-18T13:47:42.000000Z",
                  "updated_at": "2022-08-18T13:47:42.000000Z"
                },
                "created_at": "2022-08-21T11:50:35.000000Z",
                "updated_at": "2022-08-21T11:50:35.000000Z"
              }
            ],
            "meta": {
              "current_page": 1,
              "last_page": 1,
              "per_page": 25,
              "item_count": 2
            },
            "links": {
              "prev_page_url": null,
              "next_page_url": null
            }
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/admin/visit
    metadata:
      title: 'Create new Visit'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      card_id:
        name: card_id
        description: 'ID of the card the visit is attached to.'
        required: true
        example: '50080528753334'
        type: string
        custom: []
      user_id:
        name: user_id
        description: 'ID of the user the visit is attached to.'
        required: true
        example: '50080528753334'
        type: string
        custom: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - GET
    uri: 'api/admin/visit/{id}'
    metadata:
      title: 'Show specified Visit'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the visit.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 6,
            "card_id": 49394739894111,
            "user_id": 1,
            "card": {
              "id": 49394739894111,
              "last_name": "Kitsune",
              "first_name": "Yasu",
              "street": "Teststraße 123",
              "postcode": "12345",
              "city": "Teststadt",
              "valid_from": "2022-01-01T00:00:00.000000Z",
              "valid_until": "2022-03-31T00:00:00.000000Z",
              "creator_id": 1,
              "comment": null,
              "created_at": "2022-08-18T13:47:42.000000Z",
              "updated_at": "2022-08-18T13:47:42.000000Z"
            },
            "created_at": "2022-08-16T16:32:52.000000Z",
            "updated_at": "2022-08-16T16:32:52.000000Z"
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - PUT
    uri: 'api/admin/visit/{id}'
    metadata:
      title: 'Update specified Visit'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the visit.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters:
      card_id:
        name: card_id
        description: 'ID of the card the visit is attached to.'
        required: true
        example: '50080528753334'
        type: string
        custom: []
      user_id:
        name: user_id
        description: 'ID of the user the visit is attached to.'
        required: true
        example: '50080528753334'
        type: string
        custom: []
    responses: []
    responseFields: []
  -
    httpMethods:
      - DELETE
    uri: 'api/admin/visit/{id}'
    metadata:
      title: 'Delete specified Visit'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the visit.'
        required: true
        example: 1
        type: integer
        custom: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true
          }
        headers: []
        description: '200'
    responseFields: []
