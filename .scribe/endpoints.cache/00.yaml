## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/handshake
    metadata:
      title: 'Create session and XSRF-Token'
      description: |-
        Required to initialise a new Cookie-Session for SPAs.
        Do not use this endpoint if you want to use Token-Auth.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Referer: '{URL of your SPA}'
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 204
        content: ''
        headers: []
        description: '204'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      title: 'Login with SPA-Session (Cookies)'
      description: |-
        After you send a GET-request to <code>/api/handshake</code>, which will create the Session and give you a XSRF-Token,
        you can send your Credentials to this endpoint and authenticate your session.

        All further requests are now authenticated through cookies and do not require an Authorization-Header.

        <aside class="warning">
          If you get an Error 419, make sure your Request contains the X-XSRF-TOKEN header.
          <p>
            You can enable this in axios with the following line:
            <pre style="float: none; width: 100%;"><code>axios.defaults.withCredentials = true;</code></pre>
          </p>
        </aside>
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Referer: '{URL of your SPA}'
      X-XSRF-TOKEN: '{Your XSRF-Token}'
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'E-Mail of the user.'
        required: true
        example: laudantium
        type: string
        custom: []
      password:
        name: password
        description: 'Password of the user.'
        required: true
        example: laudantium
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "user": {
              "id": 1,
              "name": "Example User",
              "email": "example@localhost.test",
              "roles": [
                "instance_manager"
              ],
              "permissions": [
                "card.external",
                "card.manage",
                "card.view",
                "limits.manage",
                "organisation.manage",
                "organisation.view",
                "shop.manage",
                "shop.view",
                "stats.view",
                "user.manage",
                "user.view"
              ],
              "instance": {
                "id": 1,
                "name": "Example Instance",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:43.000000Z",
                "updated_at": "2022-08-02T11:59:43.000000Z"
              },
              "organization": {
                "id": 1,
                "name": "Example Organisation",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:44.000000Z",
                "updated_at": "2022-08-02T11:59:44.000000Z"
              },
              "created_at": "2022-08-02T11:59:44.000000Z",
              "updated_at": "2022-08-02T11:59:44.000000Z"
            }
          }
        headers: []
        description: '200, Valid credentials'
      -
        status: 401
        content: |-
          {
            "success": false
          }
        headers: []
        description: '401, Invalid credentials'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/auth/token
    metadata:
      title: 'Login with Bearer Token (Authorization Header)'
      description: |-
        <small class="badge badge-purple">App authorization available</small>

        If you are not able to use Cookies, for example in a mobile application, you can use Token-Auth instead.
        Tokens will be valid for 20 hours before they expire.

        <aside class="warning">
          Endpoints under the <code>/admin</code> path will not be available for Applications using Token-Auth.
        </aside>
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'E-Mail of the user.'
        required: true
        example: laudantium
        type: string
        custom: []
      password:
        name: password
        description: 'Password of the user.'
        required: true
        example: laudantium
        type: string
        custom: []
      device_name:
        name: device_name
        description: 'Name of the device, used for identification of the token. Must not be greater than 125 characters.'
        required: true
        example: gnpvoahjpxfnvoeetmtfqumygmyxaxnluacrxfsujgdqrujyxgirkkndke
        type: string
        custom: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "token": "{YOUR_AUTH_KEY}",
            "user": {
              "id": 1,
              "name": "Example User",
              "email": "example@localhost.test",
              "roles": [
                "instance_manager"
              ],
              "permissions": [
                "card.external",
                "card.manage",
                "card.view",
                "limits.manage",
                "organisation.manage",
                "organisation.view",
                "shop.manage",
                "shop.view",
                "stats.view",
                "user.manage",
                "user.view"
              ],
              "instance": {
                "id": 1,
                "name": "Example Instance",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:43.000000Z",
                "updated_at": "2022-08-02T11:59:43.000000Z"
              },
              "organization": {
                "id": 1,
                "name": "Example Organisation",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:44.000000Z",
                "updated_at": "2022-08-02T11:59:44.000000Z"
              },
              "created_at": "2022-08-02T11:59:44.000000Z",
              "updated_at": "2022-08-02T11:59:44.000000Z"
            }
          }
        headers: []
        description: '200, Valid credentials'
      -
        status: 401
        content: |-
          {
            "success": false
          }
        headers: []
        description: '401, Invalid credentials'
    responseFields: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      title: Logout
      description: |-
        <small class="badge badge-purple">App authorization available</small>

        Invalidate your current session/token
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true
          }
        headers: []
        description: '200'
    responseFields: []
  -
    httpMethods:
      - GET
    uri: api/auth/heartbeat
    metadata:
      title: Heartbeat
      description: |-
        <small class="badge badge-purple">App authorization available</small>

        Checks if the session is still valid and active and returns information about the authenticated user.

        <aside class="warning">
            This endpoint does NOT change the active session and therefore is unable to increase the lifetime of the session.
            Its purpose is only for testing if the session is still valid and active.
        </aside>
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    queryParameters: []
    bodyParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "user": {
              "id": 1,
              "name": "Example User",
              "email": "example@localhost.test",
              "roles": [
                "instance_manager"
              ],
              "permissions": [
                "card.external",
                "card.manage",
                "card.view",
                "limits.manage",
                "organisation.manage",
                "organisation.view",
                "shop.manage",
                "shop.view",
                "stats.view",
                "user.manage",
                "user.view"
              ],
              "instance": {
                "id": 1,
                "name": "Example Instance",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:43.000000Z",
                "updated_at": "2022-08-02T11:59:43.000000Z"
              },
              "organization": {
                "id": 1,
                "name": "Example Organisation",
                "street": "Teststreet 123",
                "postcode": "12345",
                "city": "Test",
                "contact": "example@localhost.test",
                "created_at": "2022-08-02T11:59:44.000000Z",
                "updated_at": "2022-08-02T11:59:44.000000Z"
              },
              "created_at": "2022-08-02T11:59:44.000000Z",
              "updated_at": "2022-08-02T11:59:44.000000Z"
            }
          }
        headers: []
        description: '200'
    responseFields: []
