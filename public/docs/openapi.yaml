openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/handshake:
    get:
      summary: 'Create session and XSRF-Token'
      description: "Required to initialise a new Cookie-Session for SPAs.\nDo not use this endpoint if you want to use Token-Auth."
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Referer
          description: ''
          example: '{URL of your SPA}'
          schema:
            type: string
      responses:
        204:
          description: ''
      tags:
        - Authentication
      security: []
  /api/auth/login:
    post:
      summary: 'Login with SPA-Session (Cookies)'
      description: "After you send a GET-request to <code>/api/handshake</code>, which will create the Session and give you a XSRF-Token,\nyou can send your Credentials to this endpoint and authenticate your session.\n\nAll further requests are now authenticated through cookies and do not require an Authorization-Header.\n\n<aside class=\"warning\">\n  If you get an Error 419, make sure your Request contains the X-XSRF-TOKEN header.\n  <p>\n    You can enable this in axios with the following line:\n    <pre style=\"float: none; width: 100%;\"><code>axios.defaults.withCredentials = true;</code></pre>\n  </p>\n</aside>"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Referer
          description: ''
          example: '{URL of your SPA}'
          schema:
            type: string
        -
          in: header
          name: X-XSRF-TOKEN
          description: ''
          example: '{Your XSRF-Token}'
          schema:
            type: string
      responses:
        200:
          description: 'Valid credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  user:
                    id: 1
                    name: 'Example User'
                    email: example@localhost.test
                    roles:
                      - instance_manager
                    permissions:
                      - card.external
                      - card.manage
                      - card.view
                      - limits.manage
                      - organisation.manage
                      - organisation.view
                      - shop.manage
                      - shop.view
                      - stats.view
                      - user.manage
                      - user.view
                    instance:
                      id: 1
                      name: 'Example Instance'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:43.000000Z'
                      updated_at: '2022-08-02T11:59:43.000000Z'
                    organization:
                      id: 1
                      name: 'Example Organisation'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
                    created_at: '2022-08-02T11:59:44.000000Z'
                    updated_at: '2022-08-02T11:59:44.000000Z'
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    example:
                      id: 1
                      name: 'Example User'
                      email: example@localhost.test
                      roles:
                        - instance_manager
                      permissions:
                        - card.external
                        - card.manage
                        - card.view
                        - limits.manage
                        - organisation.manage
                        - organisation.view
                        - shop.manage
                        - shop.view
                        - stats.view
                        - user.manage
                        - user.view
                      instance:
                        id: 1
                        name: 'Example Instance'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:43.000000Z'
                        updated_at: '2022-08-02T11:59:43.000000Z'
                      organization:
                        id: 1
                        name: 'Example Organisation'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:44.000000Z'
                        updated_at: '2022-08-02T11:59:44.000000Z'
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                properties:
                  success:
                    type: boolean
                    example: false
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'E-Mail of the user.'
                  example: sint
                password:
                  type: string
                  description: 'Password of the user.'
                  example: est
              required:
                - email
                - password
      security: []
  /api/auth/token:
    post:
      summary: 'Login with Bearer Token (Authorization Header)'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nIf you are not able to use Cookies, for example in a mobile application, you can use Token-Auth instead.\nTokens will be valid for 20 hours before they expire.\n\n<aside class=\"warning\">\n  Endpoints under the <code>/admin</code> path will not be available for Applications using Token-Auth.\n</aside>"
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'Valid credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  token: '{YOUR_AUTH_KEY}'
                  user:
                    id: 1
                    name: 'Example User'
                    email: example@localhost.test
                    roles:
                      - instance_manager
                    permissions:
                      - card.external
                      - card.manage
                      - card.view
                      - limits.manage
                      - organisation.manage
                      - organisation.view
                      - shop.manage
                      - shop.view
                      - stats.view
                      - user.manage
                      - user.view
                    instance:
                      id: 1
                      name: 'Example Instance'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:43.000000Z'
                      updated_at: '2022-08-02T11:59:43.000000Z'
                    organization:
                      id: 1
                      name: 'Example Organisation'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
                    created_at: '2022-08-02T11:59:44.000000Z'
                    updated_at: '2022-08-02T11:59:44.000000Z'
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: '{YOUR_AUTH_KEY}'
                  user:
                    type: object
                    example:
                      id: 1
                      name: 'Example User'
                      email: example@localhost.test
                      roles:
                        - instance_manager
                      permissions:
                        - card.external
                        - card.manage
                        - card.view
                        - limits.manage
                        - organisation.manage
                        - organisation.view
                        - shop.manage
                        - shop.view
                        - stats.view
                        - user.manage
                        - user.view
                      instance:
                        id: 1
                        name: 'Example Instance'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:43.000000Z'
                        updated_at: '2022-08-02T11:59:43.000000Z'
                      organization:
                        id: 1
                        name: 'Example Organisation'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:44.000000Z'
                        updated_at: '2022-08-02T11:59:44.000000Z'
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
        401:
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                properties:
                  success:
                    type: boolean
                    example: false
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'E-Mail of the user. Must be a valid email address.'
                  example: angela.marquardt@example.com
                password:
                  type: string
                  description: 'Password of the user.'
                  example: saepe
                device_name:
                  type: string
                  description: 'Name of the device, used for identification of the token.'
                  example: occaecati
              required:
                - email
                - password
                - device_name
      security: []
  /api/auth/logout:
    post:
      summary: Logout
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nInvalidate your current session/token"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Authentication
  /api/auth/heartbeat:
    get:
      summary: Heartbeat
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nChecks if the session is still valid and active and returns information about the authenticated user.\n\n<aside class=\"warning\">\n    This endpoint does NOT change the active session and therefore is unable to increase the lifetime of the session.\n    Its purpose is only for testing if the session is still valid and active.\n</aside>"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  user:
                    id: 1
                    name: 'Example User'
                    email: example@localhost.test
                    roles:
                      - instance_manager
                    permissions:
                      - card.external
                      - card.manage
                      - card.view
                      - limits.manage
                      - organisation.manage
                      - organisation.view
                      - shop.manage
                      - shop.view
                      - stats.view
                      - user.manage
                      - user.view
                    instance:
                      id: 1
                      name: 'Example Instance'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:43.000000Z'
                      updated_at: '2022-08-02T11:59:43.000000Z'
                    organization:
                      id: 1
                      name: 'Example Organisation'
                      street: 'Teststreet 123'
                      postcode: '12345'
                      city: Test
                      contact: example@localhost.test
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
                    created_at: '2022-08-02T11:59:44.000000Z'
                    updated_at: '2022-08-02T11:59:44.000000Z'
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    example:
                      id: 1
                      name: 'Example User'
                      email: example@localhost.test
                      roles:
                        - instance_manager
                      permissions:
                        - card.external
                        - card.manage
                        - card.view
                        - limits.manage
                        - organisation.manage
                        - organisation.view
                        - shop.manage
                        - shop.view
                        - stats.view
                        - user.manage
                        - user.view
                      instance:
                        id: 1
                        name: 'Example Instance'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:43.000000Z'
                        updated_at: '2022-08-02T11:59:43.000000Z'
                      organization:
                        id: 1
                        name: 'Example Organisation'
                        street: 'Teststreet 123'
                        postcode: '12345'
                        city: Test
                        contact: example@localhost.test
                        created_at: '2022-08-02T11:59:44.000000Z'
                        updated_at: '2022-08-02T11:59:44.000000Z'
                      created_at: '2022-08-02T11:59:44.000000Z'
                      updated_at: '2022-08-02T11:59:44.000000Z'
      tags:
        - Authentication
  /api/admin/card:
    get:
      summary: 'List all Cards'
      description: ''
      parameters:
        -
          in: query
          name: last_name
          description: 'Last name contains.'
          example: quia
          required: false
          schema:
            type: string
            description: 'Last name contains.'
            example: quia
        -
          in: query
          name: first_name
          description: 'First name contains.'
          example: perferendis
          required: false
          schema:
            type: string
            description: 'First name contains.'
            example: perferendis
        -
          in: query
          name: street
          description: 'Street contains.'
          example: doloremque
          required: false
          schema:
            type: string
            description: 'Street contains.'
            example: doloremque
        -
          in: query
          name: postcode
          description: 'Postcode contains.'
          example: explicabo
          required: false
          schema:
            type: string
            description: 'Postcode contains.'
            example: explicabo
        -
          in: query
          name: city
          description: 'City contains.'
          example: sint
          required: false
          schema:
            type: string
            description: 'City contains.'
            example: sint
        -
          in: query
          name: valid_from
          description: ''
          example: []
          required: false
          schema:
            type: object
            description: ''
            example: []
            properties: []
        -
          in: query
          name: valid_from.0
          description: 'Valid from is after this date. Must be a valid date.'
          example: '2022-08-22T16:11:31'
          required: false
          schema:
            type: string
            description: 'Valid from is after this date. Must be a valid date.'
            example: '2022-08-22T16:11:31'
        -
          in: query
          name: valid_from.1
          description: 'Valid from is before this date. Must be a valid date. This field is required when <code>valid_from.0</code> is present.'
          example: '2022-08-22T16:11:31'
          required: false
          schema:
            type: string
            description: 'Valid from is before this date. Must be a valid date. This field is required when <code>valid_from.0</code> is present.'
            example: '2022-08-22T16:11:31'
        -
          in: query
          name: valid_until
          description: ''
          example: []
          required: false
          schema:
            type: object
            description: ''
            example: []
            properties: []
        -
          in: query
          name: valid_until.0
          description: 'Valid until is after this date. Must be a valid date.'
          example: '2022-08-22T16:11:31'
          required: false
          schema:
            type: string
            description: 'Valid until is after this date. Must be a valid date.'
            example: '2022-08-22T16:11:31'
        -
          in: query
          name: valid_until.1
          description: 'Valid until is before this date. Must be a valid date. This field is required when <code>valid_until.0</code> is present.'
          example: '2022-08-22T16:11:31'
          required: false
          schema:
            type: string
            description: 'Valid until is before this date. Must be a valid date. This field is required when <code>valid_until.0</code> is present.'
            example: '2022-08-22T16:11:31'
        -
          in: query
          name: creator_id
          description: 'Created by user_id.'
          example: null
          required: false
          schema:
            type: string
            description: 'Created by user_id.'
            example: null
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>last_name</code>, <code>first_name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, <code>valid_from</code>, <code>valid_until</code>, or <code>creator_id</code>.'
          example: postcode
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>last_name</code>, <code>first_name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, <code>valid_from</code>, <code>valid_until</code>, or <code>creator_id</code>.'
            example: postcode
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: desc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 7
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 7
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Card
    post:
      summary: 'Create new Card'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                last_name:
                  type: string
                  description: 'Last name of the cardholder.'
                  example: veritatis
                first_name:
                  type: string
                  description: 'First name of the cardholder.'
                  example: velit
                street:
                  type: string
                  description: 'Street where the cardholder is located.'
                  example: et
                postcode:
                  type: string
                  description: 'Postcode where the cardholder is located.'
                  example: asperiores
                city:
                  type: string
                  description: 'City where the cardholder is located.'
                  example: labore
                valid_from:
                  type: string
                  description: 'Date and time of the start of validity of the card. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                valid_until:
                  type: string
                  description: 'Date and time of the expiry of the card. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                creator_id:
                  type: string
                  description: 'ID of the User the card is attached to.'
                  example: veritatis
              required:
                - last_name
                - first_name
                - valid_from
                - valid_until
                - creator_id
  '/api/admin/card/{id}':
    get:
      summary: 'Show specified Card'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Card
    put:
      summary: 'Update specified Card'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                last_name:
                  type: string
                  description: 'Last name of the cardholder.'
                  example: magni
                first_name:
                  type: string
                  description: 'First name of the cardholder.'
                  example: sit
                street:
                  type: string
                  description: 'Street where the cardholder is located.'
                  example: quaerat
                postcode:
                  type: string
                  description: 'Postcode where the cardholder is located.'
                  example: et
                city:
                  type: string
                  description: 'City where the cardholder is located.'
                  example: architecto
                valid_from:
                  type: string
                  description: 'Date and time of the start of validity of the card. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                valid_until:
                  type: string
                  description: 'Date and time of the expiry of the card. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                creator_id:
                  type: string
                  description: 'ID of the User the card is attached to.'
                  example: saepe
              required:
                - last_name
                - first_name
                - valid_from
                - valid_until
                - creator_id
    delete:
      summary: 'Delete specified Card'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Card
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the card.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/card/visit/{card_id}':
    get:
      summary: 'Show specified Card and related Persons'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nEndpoint shows the specified card, the associated people and the limitation_state.\nThe limitation_state shows for the persons the limit for a productType and how\nmany of them have already been used by a person"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Checkout
    post:
      summary: 'Create new Visit, LineItems'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nEndpoint creates a new Visit entry and stores the submitted lineItems"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Checkout
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                lineItems:
                  type: array
                  description: ''
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      person_id:
                        type: string
                        description: 'ID of the person the lineItem is for.'
                        example: beatae
                      product_type_id:
                        type: string
                        description: 'ID of the product_type of the lineItem.'
                        example: molestiae
                      amount:
                        type: integer
                        description: 'The amount of purchased lineItems of the same product_type. Must be at least 1.'
                        example: 1
                    required:
                      - person_id
                      - product_type_id
                      - amount
    parameters:
      -
        in: path
        name: card_id
        description: 'The ID of the card.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/limitation/limit:
    get:
      summary: 'List all Limitation'
      description: ''
      parameters:
        -
          in: query
          name: limitation_set_id
          description: 'Limitation Set.'
          example: null
          required: false
          schema:
            type: string
            description: 'Limitation Set.'
            example: null
        -
          in: query
          name: product_type_id
          description: 'Product Type.'
          example: null
          required: false
          schema:
            type: string
            description: 'Product Type.'
            example: null
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>limitation_set_id</code>, <code>product_type_id</code>, or <code>limit</code>.'
          example: limit
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>limitation_set_id</code>, <code>product_type_id</code>, or <code>limit</code>.'
            example: limit
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: desc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 14
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 14
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Limitation
    post:
      summary: 'Create new Limitation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Limitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_type_id:
                  type: string
                  description: 'ID of the product type the limitation is attached to.'
                  example: iste
                limitation_set_id:
                  type: string
                  description: 'ID of the limitation set the limitation is attached to.'
                  example: dolor
                limit:
                  type: integer
                  description: 'Number that determines the limit.'
                  example: 5
              required:
                - product_type_id
                - limitation_set_id
  '/api/admin/limitation/limit/{limitation_id}':
    get:
      summary: 'Show specified Limitation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Limitation
    put:
      summary: 'Update specified Limitation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Limitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_type_id:
                  type: string
                  description: 'ID of the product type the limitation is attached to.'
                  example: nam
                limitation_set_id:
                  type: string
                  description: 'ID of the limitation set the limitation is attached to.'
                  example: ea
                limit:
                  type: integer
                  description: 'Number that determines the limit.'
                  example: 20
              required:
                - product_type_id
                - limitation_set_id
    delete:
      summary: 'Delete specified Limitation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Limitation
    parameters:
      -
        in: path
        name: limitation_id
        description: 'The ID of the limitation.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/limitation/set:
    get:
      summary: 'List all LimitationSets'
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Filter by name.'
          example: eaque
          required: false
          schema:
            type: string
            description: 'Filter by name.'
            example: eaque
        -
          in: query
          name: valid_from
          description: ''
          example: []
          required: false
          schema:
            type: object
            description: ''
            example: []
            properties: []
        -
          in: query
          name: valid_from.0
          description: 'Valid from is after this date. Must be a valid date.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Valid from is after this date. Must be a valid date.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: valid_from.1
          description: 'Valid from is before this date. Must be a valid date. This field is required when <code>valid_from.0</code> is present.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Valid from is before this date. Must be a valid date. This field is required when <code>valid_from.0</code> is present.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: valid_until
          description: ''
          example: []
          required: false
          schema:
            type: object
            description: ''
            example: []
            properties: []
        -
          in: query
          name: valid_until.0
          description: 'Valid until is after this date. Must be a valid date.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Valid until is after this date. Must be a valid date.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: valid_until.1
          description: 'Valid until is before this date. Must be a valid date. This field is required when <code>valid_until.0</code> is present.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Valid until is before this date. Must be a valid date. This field is required when <code>valid_until.0</code> is present.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, <code>valid_from</code>, or <code>valid_until</code>.'
          example: name
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, <code>valid_from</code>, or <code>valid_until</code>.'
            example: name
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: desc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 20
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Limitation Set'
    post:
      summary: 'Create new LimitationSet'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Limitation Set'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the limitation set.'
                  example: sed
                valid_from:
                  type: string
                  description: 'Date and time of the start of the validity of the limitation set. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                valid_until:
                  type: string
                  description: 'Date and time of the expiry of the limitation set. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
              required:
                - name
                - valid_from
  '/api/admin/limitation/set/{limitationSet_id}':
    get:
      summary: 'Show specified LimitationSet'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Limitation Set'
    put:
      summary: 'Update specified LimitationSet'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Limitation Set'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the limitation set.'
                  example: excepturi
                valid_from:
                  type: string
                  description: 'Date and time of the start of the validity of the limitation set. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
                valid_until:
                  type: string
                  description: 'Date and time of the expiry of the limitation set. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
              required:
                - name
                - valid_from
    delete:
      summary: 'Delete specified LimitationSet'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Limitation Set'
    parameters:
      -
        in: path
        name: limitationSet_id
        description: 'The ID of the limitationSet.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/lineItem:
    get:
      summary: 'List all LineItems'
      description: ''
      parameters:
        -
          in: query
          name: visit_id
          description: Visit.
          example: null
          required: false
          schema:
            type: string
            description: Visit.
            example: null
        -
          in: query
          name: person_id
          description: Person.
          example: null
          required: false
          schema:
            type: string
            description: Person.
            example: null
        -
          in: query
          name: product_type_id
          description: 'Product Type.'
          example: null
          required: false
          schema:
            type: string
            description: 'Product Type.'
            example: null
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>visit_id</code>, <code>person_id</code>, or <code>product_type_id</code>.'
          example: id
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>visit_id</code>, <code>person_id</code>, or <code>product_type_id</code>.'
            example: id
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 19
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 19
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Line Item'
    post:
      summary: 'Create new LineItem'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Line Item'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                visit_id:
                  type: string
                  description: 'ID of the visit the lineItem is attached to.'
                  example: quasi
                person_id:
                  type: string
                  description: 'ID of the person the lineItem is attached to.'
                  example: at
                product_type_id:
                  type: string
                  description: 'ID of the product_type the lineItem is attached to.'
                  example: omnis
              required:
                - visit_id
                - person_id
                - product_type_id
  '/api/admin/lineItem/{id}':
    get:
      summary: 'Show specified LineItem'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Line Item'
    put:
      summary: 'Update specified LineItem'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Line Item'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                visit_id:
                  type: string
                  description: 'ID of the visit the lineItem is attached to.'
                  example: et
                person_id:
                  type: string
                  description: 'ID of the person the lineItem is attached to.'
                  example: architecto
                product_type_id:
                  type: string
                  description: 'ID of the product_type the lineItem is attached to.'
                  example: nemo
              required:
                - visit_id
                - person_id
                - product_type_id
    delete:
      summary: 'Delete specified LineItem'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Line Item'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the lineItem.'
        example: 3
        required: true
        schema:
          type: integer
  /api/admin/organization:
    get:
      summary: 'List all Organization'
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Name contains.'
          example: vitae
          required: false
          schema:
            type: string
            description: 'Name contains.'
            example: vitae
        -
          in: query
          name: street
          description: 'Street contains.'
          example: non
          required: false
          schema:
            type: string
            description: 'Street contains.'
            example: non
        -
          in: query
          name: postcode
          description: 'Postcode contains.'
          example: sint
          required: false
          schema:
            type: string
            description: 'Postcode contains.'
            example: sint
        -
          in: query
          name: city
          description: 'City contains.'
          example: quis
          required: false
          schema:
            type: string
            description: 'City contains.'
            example: quis
        -
          in: query
          name: contact
          description: 'Contact contains.'
          example: facilis
          required: false
          schema:
            type: string
            description: 'Contact contains.'
            example: facilis
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, or <code>contact</code>.'
          example: id
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, or <code>contact</code>.'
            example: id
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 1
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organization
    post:
      summary: 'Create new Organization'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the organization.'
                  example: unde
                street:
                  type: string
                  description: 'Street where the organization is located.'
                  example: non
                postcode:
                  type: string
                  description: 'Postcode where the organization is located.'
                  example: ab
                city:
                  type: string
                  description: 'City where the organization is located.'
                  example: maiores
                contact:
                  type: string
                  description: 'Contact information from the organization.'
                  example: ex
              required:
                - name
                - street
                - postcode
                - city
                - contact
  '/api/admin/organization/{id}':
    get:
      summary: 'Show specified Organization'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organization
    put:
      summary: 'Update specified Organization'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the organization.'
                  example: molestias
                street:
                  type: string
                  description: 'Street where the organization is located.'
                  example: et
                postcode:
                  type: string
                  description: 'Postcode where the organization is located.'
                  example: vel
                city:
                  type: string
                  description: 'City where the organization is located.'
                  example: et
                contact:
                  type: string
                  description: 'Contact information from the organization.'
                  example: pariatur
              required:
                - name
                - street
                - postcode
                - city
                - contact
    delete:
      summary: 'Delete specified Organization'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Organization
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organization.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/pdf/card/{card_id}':
    get:
      summary: 'Print specified Card'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nGenerate PDF for the given Card-ID. You can control the response with the Query-Params listed below.\nIf none is given it will generate a json with the base64 encoded PDF-File."
      parameters:
        -
          in: query
          name: download
          description: 'Download generated PDF'
          example: null
          required: false
          schema:
            type: string
            description: 'Download generated PDF'
            example: null
        -
          in: query
          name: raw
          description: 'Show PDF in Browser'
          example: null
          required: false
          schema:
            type: string
            description: 'Show PDF in Browser'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - PDF
    parameters:
      -
        in: path
        name: card_id
        description: 'The ID of the card.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/person:
    get:
      summary: 'List all persons'
      description: ''
      parameters:
        -
          in: query
          name: card_id
          description: Card.
          example: null
          required: false
          schema:
            type: string
            description: Card.
            example: null
        -
          in: query
          name: gender
          description: 'Gender contains.'
          example: nihil
          required: false
          schema:
            type: string
            description: 'Gender contains.'
            example: nihil
        -
          in: query
          name: age
          description: 'Age is.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Age is.'
            example: 10
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, <code>gender</code>, or <code>age</code>.'
          example: id
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, <code>gender</code>, or <code>age</code>.'
            example: id
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: desc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 10
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Person
    post:
      summary: 'Create new Person'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the person is attached to.'
                  example: nisi
                gender:
                  type: string
                  description: 'Gender of the person.'
                  example: suscipit
                age:
                  type: integer
                  description: 'Age of the Person.'
                  example: 9
                limitation_sets:
                  type: array
                  description: 'IDs of the limitation_sets.'
                  example:
                    - '49394739894111'
                  items:
                    type: string
              required:
                - card_id
                - gender
                - age
                - limitation_sets
  '/api/admin/person/{id}':
    get:
      summary: 'Show specified Person'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Person
    put:
      summary: 'Update specified Person'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the person is attached to.'
                  example: molestiae
                gender:
                  type: string
                  description: 'Gender of the person.'
                  example: suscipit
                age:
                  type: integer
                  description: 'Age of the Person.'
                  example: 16
                limitation_sets:
                  type: array
                  description: 'IDs of the limitation_sets.'
                  example:
                    - '49394739894111'
                  items:
                    type: string
              required:
                - card_id
                - gender
                - age
                - limitation_sets
    delete:
      summary: 'Delete specified Person'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Person
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the person.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/product-type:
    get:
      summary: 'List all ProductTypes'
      description: ''
      parameters:
        -
          in: query
          name: name
          description: 'Name contains.'
          example: et
          required: false
          schema:
            type: string
            description: 'Name contains.'
            example: et
        -
          in: query
          name: icon
          description: 'Icon contains.'
          example: voluptas
          required: false
          schema:
            type: string
            description: 'Icon contains.'
            example: voluptas
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, or <code>icon</code>.'
          example: name
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>name</code>, or <code>icon</code>.'
            example: name
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 2
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 2
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product Type'
    post:
      summary: 'Create new ProductType'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Type'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the product type.'
                  example: sit
                icon:
                  type: string
                  description: 'Icon of the product type.'
                  example: doloremque
              required:
                - name
  '/api/admin/product-type/{productType_id}':
    get:
      summary: 'Show specified ProductType'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product Type'
    put:
      summary: 'Update specified ProductType'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Type'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the product type.'
                  example: est
                icon:
                  type: string
                  description: 'Icon of the product type.'
                  example: sed
              required:
                - name
    delete:
      summary: 'Delete specified ProductType'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Product Type'
    parameters:
      -
        in: path
        name: productType_id
        description: 'The ID of the productType.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/reservation:
    get:
      summary: 'List all Reservations'
      description: ''
      parameters:
        -
          in: query
          name: card_id
          description: Card.
          example: null
          required: false
          schema:
            type: string
            description: Card.
            example: null
        -
          in: query
          name: shop_id
          description: Shop.
          example: null
          required: false
          schema:
            type: string
            description: Shop.
            example: null
        -
          in: query
          name: time
          description: ''
          example: []
          required: false
          schema:
            type: object
            description: ''
            example: []
            properties: []
        -
          in: query
          name: time.0
          description: 'Time is after this date. Must be a valid date.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Time is after this date. Must be a valid date.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: time.1
          description: 'Time is before this date. Must be a valid date. This field is required when <code>time.0</code> is present.'
          example: '2022-08-22T16:11:30'
          required: false
          schema:
            type: string
            description: 'Time is before this date. Must be a valid date. This field is required when <code>time.0</code> is present.'
            example: '2022-08-22T16:11:30'
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, <code>shop_id</code>, or <code>time</code>.'
          example: shop_id
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, <code>shop_id</code>, or <code>time</code>.'
            example: shop_id
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: desc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 20
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Reservation
    post:
      summary: 'Create new Reservation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the reservation is attached to.'
                  example: vel
                shop_id:
                  type: string
                  description: 'ID of the shop the reservation is for.'
                  example: non
                time:
                  type: string
                  description: 'Date and Time for the reservation. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
              required:
                - card_id
                - shop_id
                - time
  '/api/admin/reservation/{id}':
    get:
      summary: 'Show specified Reservation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Reservation
    put:
      summary: 'Update specified Reservation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the reservation is attached to.'
                  example: veniam
                shop_id:
                  type: string
                  description: 'ID of the shop the reservation is for.'
                  example: id
                time:
                  type: string
                  description: 'Date and Time for the reservation. Must be a valid date.'
                  example: '2022-08-04 12:00:00'
              required:
                - card_id
                - shop_id
                - time
    delete:
      summary: 'Delete specified Reservation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Reservation
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the reservation.'
        example: 2
        required: true
        schema:
          type: integer
  /api/schedule:
    get:
      summary: 'List available shops'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nList all shops that are in the same organization as the user"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Schedule
  '/api/schedule/{shop_id}':
    get:
      summary: 'List today´s reservations'
      description: "<small class=\"badge badge-purple\">App authorization available</small>\n\nList all today's reservations for a specified store"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Schedule
    parameters:
      -
        in: path
        name: shop_id
        description: 'The ID of the shop.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/shop:
    get:
      summary: 'List all Shops'
      description: ''
      parameters:
        -
          in: query
          name: organization_id
          description: Organization.
          example: null
          required: false
          schema:
            type: string
            description: Organization.
            example: null
        -
          in: query
          name: name
          description: 'Name contains.'
          example: dolorum
          required: false
          schema:
            type: string
            description: 'Name contains.'
            example: dolorum
        -
          in: query
          name: street
          description: 'Street contains.'
          example: maiores
          required: false
          schema:
            type: string
            description: 'Street contains.'
            example: maiores
        -
          in: query
          name: postcode
          description: 'Postcode contains.'
          example: beatae
          required: false
          schema:
            type: string
            description: 'Postcode contains.'
            example: beatae
        -
          in: query
          name: city
          description: 'City contains.'
          example: quos
          required: false
          schema:
            type: string
            description: 'City contains.'
            example: quos
        -
          in: query
          name: contact
          description: 'Contact contains.'
          example: consequatur
          required: false
          schema:
            type: string
            description: 'Contact contains.'
            example: consequatur
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>organization_id</code>, <code>name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, or <code>contact</code>.'
          example: contact
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>organization_id</code>, <code>name</code>, <code>street</code>, <code>postcode</code>, <code>city</code>, or <code>contact</code>.'
            example: contact
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 14
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 14
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Shop
    post:
      summary: 'Create new Shop'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Shop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id:
                  type: string
                  description: 'ID of the organization the shop is attached to.'
                  example: magni
                name:
                  type: string
                  description: 'Name of the shop.'
                  example: earum
                street:
                  type: string
                  description: 'Street where the shop is located.'
                  example: iste
                postcode:
                  type: string
                  description: 'Postcode where the shop is located.'
                  example: provident
                city:
                  type: string
                  description: 'City where the shop is located.'
                  example: delectus
                contact:
                  type: string
                  description: 'Contact information from the shop.'
                  example: in
                opening_hours:
                  type: object
                  description: ''
                  example: []
                  properties:
                    monday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Monday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Monday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Monday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    tuesday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Tuesday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Tuesday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Tuesday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    wednesday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Wednesday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Wednesday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Wednesday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    thursday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Thursday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Thursday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Thursday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    friday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Friday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Friday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Friday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    saturday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Saturday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Saturday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Saturday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    sunday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Sunday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Sunday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Sunday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
              required:
                - organization_id
                - name
                - street
                - postcode
                - city
                - contact
  '/api/admin/shop/{id}':
    get:
      summary: 'Show specified Shop'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Shop
    put:
      summary: 'Update specified Shop'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Shop
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id:
                  type: string
                  description: 'ID of the organization the shop is attached to.'
                  example: molestiae
                name:
                  type: string
                  description: 'Name of the shop.'
                  example: voluptates
                street:
                  type: string
                  description: 'Street where the shop is located.'
                  example: non
                postcode:
                  type: string
                  description: 'Postcode where the shop is located.'
                  example: reiciendis
                city:
                  type: string
                  description: 'City where the shop is located.'
                  example: et
                contact:
                  type: string
                  description: 'Contact information from the shop.'
                  example: sunt
                opening_hours:
                  type: object
                  description: ''
                  example: []
                  properties:
                    monday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Monday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Monday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Monday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    tuesday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Tuesday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Tuesday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Tuesday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    wednesday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Wednesday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Wednesday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Wednesday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    thursday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Thursday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Thursday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Thursday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    friday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Friday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Friday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Friday. Must be at least 1.'
                            example: 1
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    saturday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Saturday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Saturday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Saturday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
                    sunday:
                      type: array
                      description: ''
                      example:
                        - []
                      items:
                        type: object
                        properties:
                          opens_at:
                            type: string
                            description: 'Time of opening of the store on Sunday. The value format is invalid.'
                            example: '07:30'
                          closes_at:
                            type: string
                            description: 'Time of closing of the store on Sunday. The value format is invalid.'
                            example: '19:00'
                          slots:
                            type: integer
                            description: 'Number of slots of the store for Sunday. Must be at least 1.'
                            example: 0
                        required:
                          - opens_at
                          - closes_at
                          - slots
              required:
                - organization_id
                - name
                - street
                - postcode
                - city
                - contact
    delete:
      summary: 'Delete specified Shop'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Shop
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the shop.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/user:
    get:
      summary: 'List all Users'
      description: ''
      parameters:
        -
          in: query
          name: organization_id
          description: Organization.
          example: null
          required: false
          schema:
            type: string
            description: Organization.
            example: null
        -
          in: query
          name: name
          description: 'Name contains.'
          example: sit
          required: false
          schema:
            type: string
            description: 'Name contains.'
            example: sit
        -
          in: query
          name: email
          description: 'E-Mail contains.'
          example: consectetur
          required: false
          schema:
            type: string
            description: 'E-Mail contains.'
            example: consectetur
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>organization_id</code>, <code>name</code>, or <code>email</code>.'
          example: name
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>organization_id</code>, <code>name</code>, or <code>email</code>.'
            example: name
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 12
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 12
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - User
    post:
      summary: 'Create new User'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id:
                  type: string
                  description: 'ID of the organization the user is attached to.'
                  example: iusto
                name:
                  type: string
                  description: 'Name of the user.'
                  example: explicabo
                email:
                  type: string
                  description: 'Email of the user. Must be a valid email address.'
                  example: isai80@example.net
                password:
                  type: string
                  description: 'Password of the user.'
                  example: amet
              required:
                - organization_id
                - name
                - email
                - password
  '/api/admin/user/{id}':
    get:
      summary: 'Show specified User'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - User
    put:
      summary: 'Update specified User'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_id:
                  type: string
                  description: 'ID of the organization the user is attached to.'
                  example: dolor
                name:
                  type: string
                  description: 'Name of the user.'
                  example: non
                email:
                  type: string
                  description: 'Email of the user. Must be a valid email address.'
                  example: beer.herman@example.net
                password:
                  type: string
                  description: 'Password of the user.'
                  example: vel
              required:
                - organization_id
                - name
                - email
                - password
    delete:
      summary: 'Delete specified User'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - User
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/visit:
    get:
      summary: 'List all Visits'
      description: ''
      parameters:
        -
          in: query
          name: card_id
          description: Card.
          example: null
          required: false
          schema:
            type: string
            description: Card.
            example: null
        -
          in: query
          name: user_id
          description: User.
          example: null
          required: false
          schema:
            type: string
            description: User.
            example: null
        -
          in: query
          name: sort
          description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, or <code>user_id</code>.'
          example: card_id
          required: false
          schema:
            type: string
            description: 'Sort by given field. Must be one of <code>id</code>, <code>card_id</code>, or <code>user_id</code>.'
            example: card_id
        -
          in: query
          name: order
          description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort ascending or descending. Must be one of <code>asc</code> or <code>desc</code>.'
            example: asc
        -
          in: query
          name: page
          description: 'Page to load.'
          example: 11
          required: false
          schema:
            type: integer
            description: 'Page to load.'
            example: 11
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Visit
    post:
      summary: 'Create new Visit'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the visit is attached to.'
                  example: quaerat
                user_id:
                  type: string
                  description: 'ID of the user the visit is attached to.'
                  example: suscipit
              required:
                - card_id
                - user_id
  '/api/admin/visit/{id}':
    get:
      summary: 'Show specified Visit'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Visit
    put:
      summary: 'Update specified Visit'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Visit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                card_id:
                  type: string
                  description: 'ID of the card the visit is attached to.'
                  example: ducimus
                user_id:
                  type: string
                  description: 'ID of the user the visit is attached to.'
                  example: rerum
              required:
                - card_id
                - user_id
    delete:
      summary: 'Delete specified Visit'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {YOUR_AUTH_KEY}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Visit
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the visit.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: ''
  -
    name: Card
    description: ''
  -
    name: Checkout
    description: ''
  -
    name: Limitation
    description: ''
  -
    name: 'Limitation Set'
    description: ''
  -
    name: 'Line Item'
    description: ''
  -
    name: Organization
    description: ''
  -
    name: PDF
    description: ''
  -
    name: Person
    description: ''
  -
    name: 'Product Type'
    description: ''
  -
    name: Reservation
    description: ''
  -
    name: Schedule
    description: ''
  -
    name: Shop
    description: ''
  -
    name: User
    description: ''
  -
    name: Visit
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
